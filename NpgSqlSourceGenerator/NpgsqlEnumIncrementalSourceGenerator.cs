using System.Collections.Immutable;
using System.Linq;
using System.Text;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp.Syntax;
using Microsoft.CodeAnalysis.Text;

namespace NpgSqlSourceGenerator;

[Generator]
public class NpgsqlEnumIncrementalSourceGenerator : IIncrementalGenerator
{
	private const string Namespace = "NpgSqlGenerators";
	private const string AttributeName = "PostgresEnumAttribute";

	private const string AttributeSourceCode = $$"""
	    // <auto-generated/>
	    #nullable enable
	    namespace {{Namespace}};
	                                             
	    [System.AttributeUsage(System.AttributeTargets.Enum)]
	    public class {{AttributeName}} : System.Attribute
	    {
	        public string? Name { get; set; }
	    }
	    """;

	private record struct EnumData(string Name, string Namespace, bool IsGlobalNamespace);

	public void Initialize(IncrementalGeneratorInitializationContext context)
	{
		// Add the marker attribute to the compilation.
		context.RegisterPostInitializationOutput(ctx => ctx.AddSource(
			"PostgresEnumAttribute.g.cs",
			SourceText.From(AttributeSourceCode, Encoding.UTF8)));

		var p = context.SyntaxProvider.ForAttributeWithMetadataName(
			 $"{Namespace}.{AttributeName}",
			 (sn, _) => sn is EnumDeclarationSyntax,
			 (gasc, _) => new EnumData(gasc.TargetSymbol.Name, gasc.TargetSymbol.ContainingNamespace.ToDisplayString(), gasc.TargetSymbol.ContainingNamespace.IsGlobalNamespace)
		);

		// Generate the source code.
		context.RegisterSourceOutput(p.Collect(), GenerateCode);
	}


	/// <summary>
	/// Generate code action.
	/// It will be executed on specific nodes (EnumDeclarationSyntax annotated with the [PostgresEnum] attribute) changed by the user.
	/// </summary>
	/// <param name="context">Source generation context used to add source files.</param>
	/// <param name="enumDeclarations">Nodes annotated with the [PostgresEnum] attribute that trigger the generate action.</param>
	private static void GenerateCode(SourceProductionContext context, ImmutableArray<EnumData> enumDeclarations)
	{

		var code = $$"""
		    // <auto-generated/>
		    #nullable enable
		    using Npgsql;
		    using Microsoft.EntityFrameworkCore;
		           
		    namespace {{Namespace}};
		           
		    internal static class PostgresEnumHelpers
		    {
		        public static NpgsqlDataSourceBuilder MapPostgresEnums(this NpgsqlDataSourceBuilder builder)
		        {
		            {{string.Join("\n", enumDeclarations.Select(m => BuildMapEnum(m, 8)))}}
		            return builder;
		        }

		        public static void RegisterPostgresEnums(this ModelBuilder builder)
		        {
		            {{string.Join("\n", enumDeclarations.Select(m => BuildHasEnum(m, 8)))}}
		        }
		    }
		    """;

		context.AddSource("PostgresEnumHelpers.g.cs", SourceText.From(code, Encoding.UTF8));
	}

	private static string BuildMapEnum(EnumData model, int indent)
	{
		var sb = new StringBuilder();
		sb.Append(' ', indent);
		sb.Append("builder.MapEnum<");
		sb.Append(model.IsGlobalNamespace 
			? $"global::{model.Name}"
			: $"{model.Namespace}.{model.Name}");
		sb.Append(">();");
		return sb.ToString();
	}

	private static string BuildHasEnum(EnumData model, int indent)
	{
		var sb = new StringBuilder();
		sb.Append(' ', indent);
		sb.Append("builder.HasPostgresEnum<");
		sb.Append(model.IsGlobalNamespace
			? $"global::{model.Name}"
			: $"{model.Namespace}.{model.Name}");
		sb.Append(">();");
		return sb.ToString();
	}
}